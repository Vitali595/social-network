{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","photos","className","s","descriptionBlock","src","large","Preloader","Post","item","message","likesCount","MyPosts","React","memo","console","log","postsElements","posts","map","p","id","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","isAuth","Number","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.6725a8b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__IGdCI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2xkqf\",\"posts\":\"MyPosts_posts__3ksge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__RTkVX\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       value={status}\r\n                       onBlur={deactivateEditMode}\r\n                       autoFocus\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n\r\n    if (!profile.photos) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n            </div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://pbs.twimg.com/profile_images/913636623300141056/58jmo4Ok.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    console.log(\"RENDER\")\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newPostText\"}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={\"Post message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            this.props.isAuth\r\n            ? userId = Number(this.props.authorizedUserId)\r\n            : this.props.history.push(\"/login\")\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}